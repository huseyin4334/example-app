version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: route-planner-db
    environment:
      POSTGRES_DB: routeplanner
      POSTGRES_USER: routeplanner
      POSTGRES_PASSWORD: routeplanner123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - route-planner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U routeplanner -d routeplanner"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Spring Boot Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: route-planner-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/routeplanner
      - SPRING_DATASOURCE_USERNAME=routeplanner
      - SPRING_DATASOURCE_PASSWORD=routeplanner123
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - route-planner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Angular Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: route-planner-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - route-planner-network
    environment:
      - API_URL=http://backend:8080

# Networks
networks:
  route-planner-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
